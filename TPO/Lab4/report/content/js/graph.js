/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 406.0, "minX": 0.0, "maxY": 3242.0, "series": [{"data": [[0.0, 406.0], [0.1, 406.0], [0.2, 406.0], [0.3, 406.0], [0.4, 406.0], [0.5, 412.0], [0.6, 412.0], [0.7, 412.0], [0.8, 412.0], [0.9, 412.0], [1.0, 413.0], [1.1, 413.0], [1.2, 413.0], [1.3, 413.0], [1.4, 413.0], [1.5, 415.0], [1.6, 415.0], [1.7, 415.0], [1.8, 415.0], [1.9, 415.0], [2.0, 415.0], [2.1, 415.0], [2.2, 415.0], [2.3, 415.0], [2.4, 415.0], [2.5, 416.0], [2.6, 416.0], [2.7, 416.0], [2.8, 416.0], [2.9, 416.0], [3.0, 417.0], [3.1, 417.0], [3.2, 417.0], [3.3, 417.0], [3.4, 417.0], [3.5, 418.0], [3.6, 418.0], [3.7, 418.0], [3.8, 418.0], [3.9, 418.0], [4.0, 419.0], [4.1, 419.0], [4.2, 419.0], [4.3, 419.0], [4.4, 419.0], [4.5, 420.0], [4.6, 420.0], [4.7, 420.0], [4.8, 420.0], [4.9, 420.0], [5.0, 420.0], [5.1, 420.0], [5.2, 420.0], [5.3, 420.0], [5.4, 420.0], [5.5, 420.0], [5.6, 420.0], [5.7, 420.0], [5.8, 420.0], [5.9, 420.0], [6.0, 421.0], [6.1, 421.0], [6.2, 421.0], [6.3, 421.0], [6.4, 421.0], [6.5, 430.0], [6.6, 430.0], [6.7, 430.0], [6.8, 430.0], [6.9, 430.0], [7.0, 435.0], [7.1, 435.0], [7.2, 435.0], [7.3, 435.0], [7.4, 435.0], [7.5, 438.0], [7.6, 438.0], [7.7, 438.0], [7.8, 438.0], [7.9, 438.0], [8.0, 442.0], [8.1, 442.0], [8.2, 442.0], [8.3, 442.0], [8.4, 442.0], [8.5, 453.0], [8.6, 453.0], [8.7, 453.0], [8.8, 453.0], [8.9, 453.0], [9.0, 453.0], [9.1, 453.0], [9.2, 453.0], [9.3, 453.0], [9.4, 453.0], [9.5, 454.0], [9.6, 454.0], [9.7, 454.0], [9.8, 454.0], [9.9, 454.0], [10.0, 456.0], [10.1, 456.0], [10.2, 456.0], [10.3, 456.0], [10.4, 456.0], [10.5, 456.0], [10.6, 456.0], [10.7, 456.0], [10.8, 456.0], [10.9, 456.0], [11.0, 458.0], [11.1, 458.0], [11.2, 458.0], [11.3, 458.0], [11.4, 458.0], [11.5, 459.0], [11.6, 459.0], [11.7, 459.0], [11.8, 459.0], [11.9, 459.0], [12.0, 459.0], [12.1, 459.0], [12.2, 459.0], [12.3, 459.0], [12.4, 459.0], [12.5, 464.0], [12.6, 464.0], [12.7, 464.0], [12.8, 464.0], [12.9, 464.0], [13.0, 465.0], [13.1, 465.0], [13.2, 465.0], [13.3, 465.0], [13.4, 465.0], [13.5, 466.0], [13.6, 466.0], [13.7, 466.0], [13.8, 466.0], [13.9, 466.0], [14.0, 472.0], [14.1, 472.0], [14.2, 472.0], [14.3, 472.0], [14.4, 472.0], [14.5, 472.0], [14.6, 472.0], [14.7, 472.0], [14.8, 472.0], [14.9, 472.0], [15.0, 472.0], [15.1, 472.0], [15.2, 472.0], [15.3, 472.0], [15.4, 472.0], [15.5, 473.0], [15.6, 473.0], [15.7, 473.0], [15.8, 473.0], [15.9, 473.0], [16.0, 474.0], [16.1, 474.0], [16.2, 474.0], [16.3, 474.0], [16.4, 474.0], [16.5, 490.0], [16.6, 490.0], [16.7, 490.0], [16.8, 490.0], [16.9, 490.0], [17.0, 498.0], [17.1, 498.0], [17.2, 498.0], [17.3, 498.0], [17.4, 498.0], [17.5, 500.0], [17.6, 500.0], [17.7, 500.0], [17.8, 500.0], [17.9, 500.0], [18.0, 502.0], [18.1, 502.0], [18.2, 502.0], [18.3, 502.0], [18.4, 502.0], [18.5, 502.0], [18.6, 502.0], [18.7, 502.0], [18.8, 502.0], [18.9, 502.0], [19.0, 502.0], [19.1, 502.0], [19.2, 502.0], [19.3, 502.0], [19.4, 502.0], [19.5, 503.0], [19.6, 503.0], [19.7, 503.0], [19.8, 503.0], [19.9, 503.0], [20.0, 503.0], [20.1, 503.0], [20.2, 503.0], [20.3, 503.0], [20.4, 503.0], [20.5, 511.0], [20.6, 511.0], [20.7, 511.0], [20.8, 511.0], [20.9, 511.0], [21.0, 526.0], [21.1, 526.0], [21.2, 526.0], [21.3, 526.0], [21.4, 526.0], [21.5, 530.0], [21.6, 530.0], [21.7, 530.0], [21.8, 530.0], [21.9, 530.0], [22.0, 530.0], [22.1, 530.0], [22.2, 530.0], [22.3, 530.0], [22.4, 530.0], [22.5, 530.0], [22.6, 530.0], [22.7, 530.0], [22.8, 530.0], [22.9, 530.0], [23.0, 530.0], [23.1, 530.0], [23.2, 530.0], [23.3, 530.0], [23.4, 530.0], [23.5, 533.0], [23.6, 533.0], [23.7, 533.0], [23.8, 533.0], [23.9, 533.0], [24.0, 540.0], [24.1, 540.0], [24.2, 540.0], [24.3, 540.0], [24.4, 540.0], [24.5, 541.0], [24.6, 541.0], [24.7, 541.0], [24.8, 541.0], [24.9, 541.0], [25.0, 542.0], [25.1, 542.0], [25.2, 542.0], [25.3, 542.0], [25.4, 542.0], [25.5, 542.0], [25.6, 542.0], [25.7, 542.0], [25.8, 542.0], [25.9, 542.0], [26.0, 543.0], [26.1, 543.0], [26.2, 543.0], [26.3, 543.0], [26.4, 543.0], [26.5, 552.0], [26.6, 552.0], [26.7, 552.0], [26.8, 552.0], [26.9, 552.0], [27.0, 553.0], [27.1, 553.0], [27.2, 553.0], [27.3, 553.0], [27.4, 553.0], [27.5, 553.0], [27.6, 553.0], [27.7, 553.0], [27.8, 553.0], [27.9, 553.0], [28.0, 554.0], [28.1, 554.0], [28.2, 554.0], [28.3, 554.0], [28.4, 554.0], [28.5, 557.0], [28.6, 557.0], [28.7, 557.0], [28.8, 557.0], [28.9, 557.0], [29.0, 568.0], [29.1, 568.0], [29.2, 568.0], [29.3, 568.0], [29.4, 568.0], [29.5, 569.0], [29.6, 569.0], [29.7, 569.0], [29.8, 569.0], [29.9, 569.0], [30.0, 569.0], [30.1, 569.0], [30.2, 569.0], [30.3, 569.0], [30.4, 569.0], [30.5, 595.0], [30.6, 595.0], [30.7, 595.0], [30.8, 595.0], [30.9, 595.0], [31.0, 598.0], [31.1, 598.0], [31.2, 598.0], [31.3, 598.0], [31.4, 598.0], [31.5, 599.0], [31.6, 599.0], [31.7, 599.0], [31.8, 599.0], [31.9, 599.0], [32.0, 601.0], [32.1, 601.0], [32.2, 601.0], [32.3, 601.0], [32.4, 601.0], [32.5, 602.0], [32.6, 602.0], [32.7, 602.0], [32.8, 602.0], [32.9, 602.0], [33.0, 608.0], [33.1, 608.0], [33.2, 608.0], [33.3, 608.0], [33.4, 608.0], [33.5, 608.0], [33.6, 608.0], [33.7, 608.0], [33.8, 608.0], [33.9, 608.0], [34.0, 615.0], [34.1, 615.0], [34.2, 615.0], [34.3, 615.0], [34.4, 615.0], [34.5, 626.0], [34.6, 626.0], [34.7, 626.0], [34.8, 626.0], [34.9, 626.0], [35.0, 627.0], [35.1, 627.0], [35.2, 627.0], [35.3, 627.0], [35.4, 627.0], [35.5, 643.0], [35.6, 643.0], [35.7, 643.0], [35.8, 643.0], [35.9, 643.0], [36.0, 643.0], [36.1, 643.0], [36.2, 643.0], [36.3, 643.0], [36.4, 643.0], [36.5, 644.0], [36.6, 644.0], [36.7, 644.0], [36.8, 644.0], [36.9, 644.0], [37.0, 644.0], [37.1, 644.0], [37.2, 644.0], [37.3, 644.0], [37.4, 644.0], [37.5, 645.0], [37.6, 645.0], [37.7, 645.0], [37.8, 645.0], [37.9, 645.0], [38.0, 645.0], [38.1, 645.0], [38.2, 645.0], [38.3, 645.0], [38.4, 645.0], [38.5, 646.0], [38.6, 646.0], [38.7, 646.0], [38.8, 646.0], [38.9, 646.0], [39.0, 646.0], [39.1, 646.0], [39.2, 646.0], [39.3, 646.0], [39.4, 646.0], [39.5, 646.0], [39.6, 646.0], [39.7, 646.0], [39.8, 646.0], [39.9, 646.0], [40.0, 646.0], [40.1, 646.0], [40.2, 646.0], [40.3, 646.0], [40.4, 646.0], [40.5, 673.0], [40.6, 673.0], [40.7, 673.0], [40.8, 673.0], [40.9, 673.0], [41.0, 677.0], [41.1, 677.0], [41.2, 677.0], [41.3, 677.0], [41.4, 677.0], [41.5, 677.0], [41.6, 677.0], [41.7, 677.0], [41.8, 677.0], [41.9, 677.0], [42.0, 678.0], [42.1, 678.0], [42.2, 678.0], [42.3, 678.0], [42.4, 678.0], [42.5, 678.0], [42.6, 678.0], [42.7, 678.0], [42.8, 678.0], [42.9, 678.0], [43.0, 679.0], [43.1, 679.0], [43.2, 679.0], [43.3, 679.0], [43.4, 679.0], [43.5, 680.0], [43.6, 680.0], [43.7, 680.0], [43.8, 680.0], [43.9, 680.0], [44.0, 680.0], [44.1, 680.0], [44.2, 680.0], [44.3, 680.0], [44.4, 680.0], [44.5, 680.0], [44.6, 680.0], [44.7, 680.0], [44.8, 680.0], [44.9, 680.0], [45.0, 680.0], [45.1, 680.0], [45.2, 680.0], [45.3, 680.0], [45.4, 680.0], [45.5, 681.0], [45.6, 681.0], [45.7, 681.0], [45.8, 681.0], [45.9, 681.0], [46.0, 682.0], [46.1, 682.0], [46.2, 682.0], [46.3, 682.0], [46.4, 682.0], [46.5, 682.0], [46.6, 682.0], [46.7, 682.0], [46.8, 682.0], [46.9, 682.0], [47.0, 682.0], [47.1, 682.0], [47.2, 682.0], [47.3, 682.0], [47.4, 682.0], [47.5, 697.0], [47.6, 697.0], [47.7, 697.0], [47.8, 697.0], [47.9, 697.0], [48.0, 705.0], [48.1, 705.0], [48.2, 705.0], [48.3, 705.0], [48.4, 705.0], [48.5, 705.0], [48.6, 705.0], [48.7, 705.0], [48.8, 705.0], [48.9, 705.0], [49.0, 706.0], [49.1, 706.0], [49.2, 706.0], [49.3, 706.0], [49.4, 706.0], [49.5, 724.0], [49.6, 724.0], [49.7, 724.0], [49.8, 724.0], [49.9, 724.0], [50.0, 726.0], [50.1, 726.0], [50.2, 726.0], [50.3, 726.0], [50.4, 726.0], [50.5, 730.0], [50.6, 730.0], [50.7, 730.0], [50.8, 730.0], [50.9, 730.0], [51.0, 730.0], [51.1, 730.0], [51.2, 730.0], [51.3, 730.0], [51.4, 730.0], [51.5, 744.0], [51.6, 744.0], [51.7, 744.0], [51.8, 744.0], [51.9, 744.0], [52.0, 747.0], [52.1, 747.0], [52.2, 747.0], [52.3, 747.0], [52.4, 747.0], [52.5, 747.0], [52.6, 747.0], [52.7, 747.0], [52.8, 747.0], [52.9, 747.0], [53.0, 748.0], [53.1, 748.0], [53.2, 748.0], [53.3, 748.0], [53.4, 748.0], [53.5, 748.0], [53.6, 748.0], [53.7, 748.0], [53.8, 748.0], [53.9, 748.0], [54.0, 749.0], [54.1, 749.0], [54.2, 749.0], [54.3, 749.0], [54.4, 749.0], [54.5, 749.0], [54.6, 749.0], [54.7, 749.0], [54.8, 749.0], [54.9, 749.0], [55.0, 749.0], [55.1, 749.0], [55.2, 749.0], [55.3, 749.0], [55.4, 749.0], [55.5, 749.0], [55.6, 749.0], [55.7, 749.0], [55.8, 749.0], [55.9, 749.0], [56.0, 763.0], [56.1, 763.0], [56.2, 763.0], [56.3, 763.0], [56.4, 763.0], [56.5, 763.0], [56.6, 763.0], [56.7, 763.0], [56.8, 763.0], [56.9, 763.0], [57.0, 764.0], [57.1, 764.0], [57.2, 764.0], [57.3, 764.0], [57.4, 764.0], [57.5, 770.0], [57.6, 770.0], [57.7, 770.0], [57.8, 770.0], [57.9, 770.0], [58.0, 784.0], [58.1, 784.0], [58.2, 784.0], [58.3, 784.0], [58.4, 784.0], [58.5, 791.0], [58.6, 791.0], [58.7, 791.0], [58.8, 791.0], [58.9, 791.0], [59.0, 792.0], [59.1, 792.0], [59.2, 792.0], [59.3, 792.0], [59.4, 792.0], [59.5, 793.0], [59.6, 793.0], [59.7, 793.0], [59.8, 793.0], [59.9, 793.0], [60.0, 793.0], [60.1, 793.0], [60.2, 793.0], [60.3, 793.0], [60.4, 793.0], [60.5, 793.0], [60.6, 793.0], [60.7, 793.0], [60.8, 793.0], [60.9, 793.0], [61.0, 794.0], [61.1, 794.0], [61.2, 794.0], [61.3, 794.0], [61.4, 794.0], [61.5, 794.0], [61.6, 794.0], [61.7, 794.0], [61.8, 794.0], [61.9, 794.0], [62.0, 794.0], [62.1, 794.0], [62.2, 794.0], [62.3, 794.0], [62.4, 794.0], [62.5, 794.0], [62.6, 794.0], [62.7, 794.0], [62.8, 794.0], [62.9, 794.0], [63.0, 808.0], [63.1, 808.0], [63.2, 808.0], [63.3, 808.0], [63.4, 808.0], [63.5, 808.0], [63.6, 808.0], [63.7, 808.0], [63.8, 808.0], [63.9, 808.0], [64.0, 809.0], [64.1, 809.0], [64.2, 809.0], [64.3, 809.0], [64.4, 809.0], [64.5, 809.0], [64.6, 809.0], [64.7, 809.0], [64.8, 809.0], [64.9, 809.0], [65.0, 810.0], [65.1, 810.0], [65.2, 810.0], [65.3, 810.0], [65.4, 810.0], [65.5, 810.0], [65.6, 810.0], [65.7, 810.0], [65.8, 810.0], [65.9, 810.0], [66.0, 810.0], [66.1, 810.0], [66.2, 810.0], [66.3, 810.0], [66.4, 810.0], [66.5, 810.0], [66.6, 810.0], [66.7, 810.0], [66.8, 810.0], [66.9, 810.0], [67.0, 818.0], [67.1, 818.0], [67.2, 818.0], [67.3, 818.0], [67.4, 818.0], [67.5, 850.0], [67.6, 850.0], [67.7, 850.0], [67.8, 850.0], [67.9, 850.0], [68.0, 851.0], [68.1, 851.0], [68.2, 851.0], [68.3, 851.0], [68.4, 851.0], [68.5, 851.0], [68.6, 851.0], [68.7, 851.0], [68.8, 851.0], [68.9, 851.0], [69.0, 852.0], [69.1, 852.0], [69.2, 852.0], [69.3, 852.0], [69.4, 852.0], [69.5, 852.0], [69.6, 852.0], [69.7, 852.0], [69.8, 852.0], [69.9, 852.0], [70.0, 852.0], [70.1, 852.0], [70.2, 852.0], [70.3, 852.0], [70.4, 852.0], [70.5, 886.0], [70.6, 886.0], [70.7, 886.0], [70.8, 886.0], [70.9, 886.0], [71.0, 904.0], [71.1, 904.0], [71.2, 904.0], [71.3, 904.0], [71.4, 904.0], [71.5, 932.0], [71.6, 932.0], [71.7, 932.0], [71.8, 932.0], [71.9, 932.0], [72.0, 932.0], [72.1, 932.0], [72.2, 932.0], [72.3, 932.0], [72.4, 932.0], [72.5, 933.0], [72.6, 933.0], [72.7, 933.0], [72.8, 933.0], [72.9, 933.0], [73.0, 933.0], [73.1, 933.0], [73.2, 933.0], [73.3, 933.0], [73.4, 933.0], [73.5, 933.0], [73.6, 933.0], [73.7, 933.0], [73.8, 933.0], [73.9, 933.0], [74.0, 934.0], [74.1, 934.0], [74.2, 934.0], [74.3, 934.0], [74.4, 934.0], [74.5, 934.0], [74.6, 934.0], [74.7, 934.0], [74.8, 934.0], [74.9, 934.0], [75.0, 956.0], [75.1, 956.0], [75.2, 956.0], [75.3, 956.0], [75.4, 956.0], [75.5, 966.0], [75.6, 966.0], [75.7, 966.0], [75.8, 966.0], [75.9, 966.0], [76.0, 974.0], [76.1, 974.0], [76.2, 974.0], [76.3, 974.0], [76.4, 974.0], [76.5, 979.0], [76.6, 979.0], [76.7, 979.0], [76.8, 979.0], [76.9, 979.0], [77.0, 1005.0], [77.1, 1005.0], [77.2, 1005.0], [77.3, 1005.0], [77.4, 1005.0], [77.5, 1006.0], [77.6, 1006.0], [77.7, 1006.0], [77.8, 1006.0], [77.9, 1006.0], [78.0, 1006.0], [78.1, 1006.0], [78.2, 1006.0], [78.3, 1006.0], [78.4, 1006.0], [78.5, 1007.0], [78.6, 1007.0], [78.7, 1007.0], [78.8, 1007.0], [78.9, 1007.0], [79.0, 1007.0], [79.1, 1007.0], [79.2, 1007.0], [79.3, 1007.0], [79.4, 1007.0], [79.5, 1020.0], [79.6, 1020.0], [79.7, 1020.0], [79.8, 1020.0], [79.9, 1020.0], [80.0, 1021.0], [80.1, 1021.0], [80.2, 1021.0], [80.3, 1021.0], [80.4, 1021.0], [80.5, 1021.0], [80.6, 1021.0], [80.7, 1021.0], [80.8, 1021.0], [80.9, 1021.0], [81.0, 1021.0], [81.1, 1021.0], [81.2, 1021.0], [81.3, 1021.0], [81.4, 1021.0], [81.5, 1022.0], [81.6, 1022.0], [81.7, 1022.0], [81.8, 1022.0], [81.9, 1022.0], [82.0, 1022.0], [82.1, 1022.0], [82.2, 1022.0], [82.3, 1022.0], [82.4, 1022.0], [82.5, 1022.0], [82.6, 1022.0], [82.7, 1022.0], [82.8, 1022.0], [82.9, 1022.0], [83.0, 1038.0], [83.1, 1038.0], [83.2, 1038.0], [83.3, 1038.0], [83.4, 1038.0], [83.5, 1141.0], [83.6, 1141.0], [83.7, 1141.0], [83.8, 1141.0], [83.9, 1141.0], [84.0, 1144.0], [84.1, 1144.0], [84.2, 1144.0], [84.3, 1144.0], [84.4, 1144.0], [84.5, 1168.0], [84.6, 1168.0], [84.7, 1168.0], [84.8, 1168.0], [84.9, 1168.0], [85.0, 1169.0], [85.1, 1169.0], [85.2, 1169.0], [85.3, 1169.0], [85.4, 1169.0], [85.5, 1169.0], [85.6, 1169.0], [85.7, 1169.0], [85.8, 1169.0], [85.9, 1169.0], [86.0, 1169.0], [86.1, 1169.0], [86.2, 1169.0], [86.3, 1169.0], [86.4, 1169.0], [86.5, 1201.0], [86.6, 1201.0], [86.7, 1201.0], [86.8, 1201.0], [86.9, 1201.0], [87.0, 1203.0], [87.1, 1203.0], [87.2, 1203.0], [87.3, 1203.0], [87.4, 1203.0], [87.5, 1207.0], [87.6, 1207.0], [87.7, 1207.0], [87.8, 1207.0], [87.9, 1207.0], [88.0, 1278.0], [88.1, 1278.0], [88.2, 1278.0], [88.3, 1278.0], [88.4, 1278.0], [88.5, 1283.0], [88.6, 1283.0], [88.7, 1283.0], [88.8, 1283.0], [88.9, 1283.0], [89.0, 1377.0], [89.1, 1377.0], [89.2, 1377.0], [89.3, 1377.0], [89.4, 1377.0], [89.5, 1378.0], [89.6, 1378.0], [89.7, 1378.0], [89.8, 1378.0], [89.9, 1378.0], [90.0, 1379.0], [90.1, 1379.0], [90.2, 1379.0], [90.3, 1379.0], [90.4, 1379.0], [90.5, 1379.0], [90.6, 1379.0], [90.7, 1379.0], [90.8, 1379.0], [90.9, 1379.0], [91.0, 1379.0], [91.1, 1379.0], [91.2, 1379.0], [91.3, 1379.0], [91.4, 1379.0], [91.5, 1380.0], [91.6, 1380.0], [91.7, 1380.0], [91.8, 1380.0], [91.9, 1380.0], [92.0, 1443.0], [92.1, 1443.0], [92.2, 1443.0], [92.3, 1443.0], [92.4, 1443.0], [92.5, 1443.0], [92.6, 1443.0], [92.7, 1443.0], [92.8, 1443.0], [92.9, 1443.0], [93.0, 1443.0], [93.1, 1443.0], [93.2, 1443.0], [93.3, 1443.0], [93.4, 1443.0], [93.5, 1443.0], [93.6, 1443.0], [93.7, 1443.0], [93.8, 1443.0], [93.9, 1443.0], [94.0, 1444.0], [94.1, 1444.0], [94.2, 1444.0], [94.3, 1444.0], [94.4, 1444.0], [94.5, 1444.0], [94.6, 1444.0], [94.7, 1444.0], [94.8, 1444.0], [94.9, 1444.0], [95.0, 1444.0], [95.1, 1444.0], [95.2, 1444.0], [95.3, 1444.0], [95.4, 1444.0], [95.5, 1444.0], [95.6, 1444.0], [95.7, 1444.0], [95.8, 1444.0], [95.9, 1444.0], [96.0, 1445.0], [96.1, 1445.0], [96.2, 1445.0], [96.3, 1445.0], [96.4, 1445.0], [96.5, 1612.0], [96.6, 1612.0], [96.7, 1612.0], [96.8, 1612.0], [96.9, 1612.0], [97.0, 2141.0], [97.1, 2141.0], [97.2, 2141.0], [97.3, 2141.0], [97.4, 2141.0], [97.5, 2144.0], [97.6, 2144.0], [97.7, 2144.0], [97.8, 2144.0], [97.9, 2144.0], [98.0, 2144.0], [98.1, 2144.0], [98.2, 2144.0], [98.3, 2144.0], [98.4, 2144.0], [98.5, 2158.0], [98.6, 2158.0], [98.7, 2158.0], [98.8, 2158.0], [98.9, 2158.0], [99.0, 2159.0], [99.1, 2159.0], [99.2, 2159.0], [99.3, 2159.0], [99.4, 2159.0], [99.5, 3236.0], [99.6, 3236.0], [99.7, 3236.0], [99.8, 3236.0], [99.9, 3236.0]], "isOverall": false, "label": "config 3 req", "isController": false}, {"data": [[0.0, 612.0], [0.1, 612.0], [0.2, 612.0], [0.3, 612.0], [0.4, 612.0], [0.5, 615.0], [0.6, 615.0], [0.7, 615.0], [0.8, 615.0], [0.9, 615.0], [1.0, 621.0], [1.1, 621.0], [1.2, 621.0], [1.3, 621.0], [1.4, 621.0], [1.5, 621.0], [1.6, 621.0], [1.7, 621.0], [1.8, 621.0], [1.9, 621.0], [2.0, 623.0], [2.1, 623.0], [2.2, 623.0], [2.3, 623.0], [2.4, 623.0], [2.5, 624.0], [2.6, 624.0], [2.7, 624.0], [2.8, 624.0], [2.9, 624.0], [3.0, 635.0], [3.1, 635.0], [3.2, 635.0], [3.3, 635.0], [3.4, 635.0], [3.5, 645.0], [3.6, 645.0], [3.7, 645.0], [3.8, 645.0], [3.9, 645.0], [4.0, 645.0], [4.1, 645.0], [4.2, 645.0], [4.3, 645.0], [4.4, 645.0], [4.5, 647.0], [4.6, 647.0], [4.7, 647.0], [4.8, 647.0], [4.9, 647.0], [5.0, 647.0], [5.1, 647.0], [5.2, 647.0], [5.3, 647.0], [5.4, 647.0], [5.5, 649.0], [5.6, 649.0], [5.7, 649.0], [5.8, 649.0], [5.9, 649.0], [6.0, 656.0], [6.1, 656.0], [6.2, 656.0], [6.3, 656.0], [6.4, 656.0], [6.5, 657.0], [6.6, 657.0], [6.7, 657.0], [6.8, 657.0], [6.9, 657.0], [7.0, 658.0], [7.1, 658.0], [7.2, 658.0], [7.3, 658.0], [7.4, 658.0], [7.5, 659.0], [7.6, 659.0], [7.7, 659.0], [7.8, 659.0], [7.9, 659.0], [8.0, 661.0], [8.1, 661.0], [8.2, 661.0], [8.3, 661.0], [8.4, 661.0], [8.5, 668.0], [8.6, 668.0], [8.7, 668.0], [8.8, 668.0], [8.9, 668.0], [9.0, 670.0], [9.1, 670.0], [9.2, 670.0], [9.3, 670.0], [9.4, 670.0], [9.5, 670.0], [9.6, 670.0], [9.7, 670.0], [9.8, 670.0], [9.9, 670.0], [10.0, 672.0], [10.1, 672.0], [10.2, 672.0], [10.3, 672.0], [10.4, 672.0], [10.5, 673.0], [10.6, 673.0], [10.7, 673.0], [10.8, 673.0], [10.9, 673.0], [11.0, 673.0], [11.1, 673.0], [11.2, 673.0], [11.3, 673.0], [11.4, 673.0], [11.5, 679.0], [11.6, 679.0], [11.7, 679.0], [11.8, 679.0], [11.9, 679.0], [12.0, 680.0], [12.1, 680.0], [12.2, 680.0], [12.3, 680.0], [12.4, 680.0], [12.5, 682.0], [12.6, 682.0], [12.7, 682.0], [12.8, 682.0], [12.9, 682.0], [13.0, 682.0], [13.1, 682.0], [13.2, 682.0], [13.3, 682.0], [13.4, 682.0], [13.5, 683.0], [13.6, 683.0], [13.7, 683.0], [13.8, 683.0], [13.9, 683.0], [14.0, 683.0], [14.1, 683.0], [14.2, 683.0], [14.3, 683.0], [14.4, 683.0], [14.5, 685.0], [14.6, 685.0], [14.7, 685.0], [14.8, 685.0], [14.9, 685.0], [15.0, 685.0], [15.1, 685.0], [15.2, 685.0], [15.3, 685.0], [15.4, 685.0], [15.5, 686.0], [15.6, 686.0], [15.7, 686.0], [15.8, 686.0], [15.9, 686.0], [16.0, 693.0], [16.1, 693.0], [16.2, 693.0], [16.3, 693.0], [16.4, 693.0], [16.5, 693.0], [16.6, 693.0], [16.7, 693.0], [16.8, 693.0], [16.9, 693.0], [17.0, 698.0], [17.1, 698.0], [17.2, 698.0], [17.3, 698.0], [17.4, 698.0], [17.5, 701.0], [17.6, 701.0], [17.7, 701.0], [17.8, 701.0], [17.9, 701.0], [18.0, 703.0], [18.1, 703.0], [18.2, 703.0], [18.3, 703.0], [18.4, 703.0], [18.5, 705.0], [18.6, 705.0], [18.7, 705.0], [18.8, 705.0], [18.9, 705.0], [19.0, 711.0], [19.1, 711.0], [19.2, 711.0], [19.3, 711.0], [19.4, 711.0], [19.5, 713.0], [19.6, 713.0], [19.7, 713.0], [19.8, 713.0], [19.9, 713.0], [20.0, 713.0], [20.1, 713.0], [20.2, 713.0], [20.3, 713.0], [20.4, 713.0], [20.5, 717.0], [20.6, 717.0], [20.7, 717.0], [20.8, 717.0], [20.9, 717.0], [21.0, 717.0], [21.1, 717.0], [21.2, 717.0], [21.3, 717.0], [21.4, 717.0], [21.5, 718.0], [21.6, 718.0], [21.7, 718.0], [21.8, 718.0], [21.9, 718.0], [22.0, 719.0], [22.1, 719.0], [22.2, 719.0], [22.3, 719.0], [22.4, 719.0], [22.5, 719.0], [22.6, 719.0], [22.7, 719.0], [22.8, 719.0], [22.9, 719.0], [23.0, 719.0], [23.1, 719.0], [23.2, 719.0], [23.3, 719.0], [23.4, 719.0], [23.5, 720.0], [23.6, 720.0], [23.7, 720.0], [23.8, 720.0], [23.9, 720.0], [24.0, 730.0], [24.1, 730.0], [24.2, 730.0], [24.3, 730.0], [24.4, 730.0], [24.5, 733.0], [24.6, 733.0], [24.7, 733.0], [24.8, 733.0], [24.9, 733.0], [25.0, 734.0], [25.1, 734.0], [25.2, 734.0], [25.3, 734.0], [25.4, 734.0], [25.5, 737.0], [25.6, 737.0], [25.7, 737.0], [25.8, 737.0], [25.9, 737.0], [26.0, 750.0], [26.1, 750.0], [26.2, 750.0], [26.3, 750.0], [26.4, 750.0], [26.5, 752.0], [26.6, 752.0], [26.7, 752.0], [26.8, 752.0], [26.9, 752.0], [27.0, 759.0], [27.1, 759.0], [27.2, 759.0], [27.3, 759.0], [27.4, 759.0], [27.5, 764.0], [27.6, 764.0], [27.7, 764.0], [27.8, 764.0], [27.9, 764.0], [28.0, 765.0], [28.1, 765.0], [28.2, 765.0], [28.3, 765.0], [28.4, 765.0], [28.5, 766.0], [28.6, 766.0], [28.7, 766.0], [28.8, 766.0], [28.9, 766.0], [29.0, 766.0], [29.1, 766.0], [29.2, 766.0], [29.3, 766.0], [29.4, 766.0], [29.5, 767.0], [29.6, 767.0], [29.7, 767.0], [29.8, 767.0], [29.9, 767.0], [30.0, 767.0], [30.1, 767.0], [30.2, 767.0], [30.3, 767.0], [30.4, 767.0], [30.5, 768.0], [30.6, 768.0], [30.7, 768.0], [30.8, 768.0], [30.9, 768.0], [31.0, 769.0], [31.1, 769.0], [31.2, 769.0], [31.3, 769.0], [31.4, 769.0], [31.5, 770.0], [31.6, 770.0], [31.7, 770.0], [31.8, 770.0], [31.9, 770.0], [32.0, 771.0], [32.1, 771.0], [32.2, 771.0], [32.3, 771.0], [32.4, 771.0], [32.5, 772.0], [32.6, 772.0], [32.7, 772.0], [32.8, 772.0], [32.9, 772.0], [33.0, 773.0], [33.1, 773.0], [33.2, 773.0], [33.3, 773.0], [33.4, 773.0], [33.5, 777.0], [33.6, 777.0], [33.7, 777.0], [33.8, 777.0], [33.9, 777.0], [34.0, 777.0], [34.1, 777.0], [34.2, 777.0], [34.3, 777.0], [34.4, 777.0], [34.5, 777.0], [34.6, 777.0], [34.7, 777.0], [34.8, 777.0], [34.9, 777.0], [35.0, 778.0], [35.1, 778.0], [35.2, 778.0], [35.3, 778.0], [35.4, 778.0], [35.5, 784.0], [35.6, 784.0], [35.7, 784.0], [35.8, 784.0], [35.9, 784.0], [36.0, 790.0], [36.1, 790.0], [36.2, 790.0], [36.3, 790.0], [36.4, 790.0], [36.5, 790.0], [36.6, 790.0], [36.7, 790.0], [36.8, 790.0], [36.9, 790.0], [37.0, 795.0], [37.1, 795.0], [37.2, 795.0], [37.3, 795.0], [37.4, 795.0], [37.5, 795.0], [37.6, 795.0], [37.7, 795.0], [37.8, 795.0], [37.9, 795.0], [38.0, 795.0], [38.1, 795.0], [38.2, 795.0], [38.3, 795.0], [38.4, 795.0], [38.5, 796.0], [38.6, 796.0], [38.7, 796.0], [38.8, 796.0], [38.9, 796.0], [39.0, 797.0], [39.1, 797.0], [39.2, 797.0], [39.3, 797.0], [39.4, 797.0], [39.5, 798.0], [39.6, 798.0], [39.7, 798.0], [39.8, 798.0], [39.9, 798.0], [40.0, 799.0], [40.1, 799.0], [40.2, 799.0], [40.3, 799.0], [40.4, 799.0], [40.5, 800.0], [40.6, 800.0], [40.7, 800.0], [40.8, 800.0], [40.9, 800.0], [41.0, 800.0], [41.1, 800.0], [41.2, 800.0], [41.3, 800.0], [41.4, 800.0], [41.5, 801.0], [41.6, 801.0], [41.7, 801.0], [41.8, 801.0], [41.9, 801.0], [42.0, 801.0], [42.1, 801.0], [42.2, 801.0], [42.3, 801.0], [42.4, 801.0], [42.5, 802.0], [42.6, 802.0], [42.7, 802.0], [42.8, 802.0], [42.9, 802.0], [43.0, 802.0], [43.1, 802.0], [43.2, 802.0], [43.3, 802.0], [43.4, 802.0], [43.5, 802.0], [43.6, 802.0], [43.7, 802.0], [43.8, 802.0], [43.9, 802.0], [44.0, 805.0], [44.1, 805.0], [44.2, 805.0], [44.3, 805.0], [44.4, 805.0], [44.5, 807.0], [44.6, 807.0], [44.7, 807.0], [44.8, 807.0], [44.9, 807.0], [45.0, 807.0], [45.1, 807.0], [45.2, 807.0], [45.3, 807.0], [45.4, 807.0], [45.5, 808.0], [45.6, 808.0], [45.7, 808.0], [45.8, 808.0], [45.9, 808.0], [46.0, 818.0], [46.1, 818.0], [46.2, 818.0], [46.3, 818.0], [46.4, 818.0], [46.5, 829.0], [46.6, 829.0], [46.7, 829.0], [46.8, 829.0], [46.9, 829.0], [47.0, 831.0], [47.1, 831.0], [47.2, 831.0], [47.3, 831.0], [47.4, 831.0], [47.5, 831.0], [47.6, 831.0], [47.7, 831.0], [47.8, 831.0], [47.9, 831.0], [48.0, 831.0], [48.1, 831.0], [48.2, 831.0], [48.3, 831.0], [48.4, 831.0], [48.5, 832.0], [48.6, 832.0], [48.7, 832.0], [48.8, 832.0], [48.9, 832.0], [49.0, 833.0], [49.1, 833.0], [49.2, 833.0], [49.3, 833.0], [49.4, 833.0], [49.5, 835.0], [49.6, 835.0], [49.7, 835.0], [49.8, 835.0], [49.9, 835.0], [50.0, 839.0], [50.1, 839.0], [50.2, 839.0], [50.3, 839.0], [50.4, 839.0], [50.5, 840.0], [50.6, 840.0], [50.7, 840.0], [50.8, 840.0], [50.9, 840.0], [51.0, 842.0], [51.1, 842.0], [51.2, 842.0], [51.3, 842.0], [51.4, 842.0], [51.5, 843.0], [51.6, 843.0], [51.7, 843.0], [51.8, 843.0], [51.9, 843.0], [52.0, 846.0], [52.1, 846.0], [52.2, 846.0], [52.3, 846.0], [52.4, 846.0], [52.5, 847.0], [52.6, 847.0], [52.7, 847.0], [52.8, 847.0], [52.9, 847.0], [53.0, 851.0], [53.1, 851.0], [53.2, 851.0], [53.3, 851.0], [53.4, 851.0], [53.5, 853.0], [53.6, 853.0], [53.7, 853.0], [53.8, 853.0], [53.9, 853.0], [54.0, 853.0], [54.1, 853.0], [54.2, 853.0], [54.3, 853.0], [54.4, 853.0], [54.5, 854.0], [54.6, 854.0], [54.7, 854.0], [54.8, 854.0], [54.9, 854.0], [55.0, 855.0], [55.1, 855.0], [55.2, 855.0], [55.3, 855.0], [55.4, 855.0], [55.5, 856.0], [55.6, 856.0], [55.7, 856.0], [55.8, 856.0], [55.9, 856.0], [56.0, 864.0], [56.1, 864.0], [56.2, 864.0], [56.3, 864.0], [56.4, 864.0], [56.5, 864.0], [56.6, 864.0], [56.7, 864.0], [56.8, 864.0], [56.9, 864.0], [57.0, 879.0], [57.1, 879.0], [57.2, 879.0], [57.3, 879.0], [57.4, 879.0], [57.5, 885.0], [57.6, 885.0], [57.7, 885.0], [57.8, 885.0], [57.9, 885.0], [58.0, 887.0], [58.1, 887.0], [58.2, 887.0], [58.3, 887.0], [58.4, 887.0], [58.5, 887.0], [58.6, 887.0], [58.7, 887.0], [58.8, 887.0], [58.9, 887.0], [59.0, 888.0], [59.1, 888.0], [59.2, 888.0], [59.3, 888.0], [59.4, 888.0], [59.5, 889.0], [59.6, 889.0], [59.7, 889.0], [59.8, 889.0], [59.9, 889.0], [60.0, 893.0], [60.1, 893.0], [60.2, 893.0], [60.3, 893.0], [60.4, 893.0], [60.5, 900.0], [60.6, 900.0], [60.7, 900.0], [60.8, 900.0], [60.9, 900.0], [61.0, 900.0], [61.1, 900.0], [61.2, 900.0], [61.3, 900.0], [61.4, 900.0], [61.5, 904.0], [61.6, 904.0], [61.7, 904.0], [61.8, 904.0], [61.9, 904.0], [62.0, 926.0], [62.1, 926.0], [62.2, 926.0], [62.3, 926.0], [62.4, 926.0], [62.5, 935.0], [62.6, 935.0], [62.7, 935.0], [62.8, 935.0], [62.9, 935.0], [63.0, 936.0], [63.1, 936.0], [63.2, 936.0], [63.3, 936.0], [63.4, 936.0], [63.5, 936.0], [63.6, 936.0], [63.7, 936.0], [63.8, 936.0], [63.9, 936.0], [64.0, 937.0], [64.1, 937.0], [64.2, 937.0], [64.3, 937.0], [64.4, 937.0], [64.5, 938.0], [64.6, 938.0], [64.7, 938.0], [64.8, 938.0], [64.9, 938.0], [65.0, 951.0], [65.1, 951.0], [65.2, 951.0], [65.3, 951.0], [65.4, 951.0], [65.5, 966.0], [65.6, 966.0], [65.7, 966.0], [65.8, 966.0], [65.9, 966.0], [66.0, 982.0], [66.1, 982.0], [66.2, 982.0], [66.3, 982.0], [66.4, 982.0], [66.5, 990.0], [66.6, 990.0], [66.7, 990.0], [66.8, 990.0], [66.9, 990.0], [67.0, 1001.0], [67.1, 1001.0], [67.2, 1001.0], [67.3, 1001.0], [67.4, 1001.0], [67.5, 1008.0], [67.6, 1008.0], [67.7, 1008.0], [67.8, 1008.0], [67.9, 1008.0], [68.0, 1008.0], [68.1, 1008.0], [68.2, 1008.0], [68.3, 1008.0], [68.4, 1008.0], [68.5, 1009.0], [68.6, 1009.0], [68.7, 1009.0], [68.8, 1009.0], [68.9, 1009.0], [69.0, 1010.0], [69.1, 1010.0], [69.2, 1010.0], [69.3, 1010.0], [69.4, 1010.0], [69.5, 1016.0], [69.6, 1016.0], [69.7, 1016.0], [69.8, 1016.0], [69.9, 1016.0], [70.0, 1022.0], [70.1, 1022.0], [70.2, 1022.0], [70.3, 1022.0], [70.4, 1022.0], [70.5, 1023.0], [70.6, 1023.0], [70.7, 1023.0], [70.8, 1023.0], [70.9, 1023.0], [71.0, 1024.0], [71.1, 1024.0], [71.2, 1024.0], [71.3, 1024.0], [71.4, 1024.0], [71.5, 1025.0], [71.6, 1025.0], [71.7, 1025.0], [71.8, 1025.0], [71.9, 1025.0], [72.0, 1025.0], [72.1, 1025.0], [72.2, 1025.0], [72.3, 1025.0], [72.4, 1025.0], [72.5, 1026.0], [72.6, 1026.0], [72.7, 1026.0], [72.8, 1026.0], [72.9, 1026.0], [73.0, 1038.0], [73.1, 1038.0], [73.2, 1038.0], [73.3, 1038.0], [73.4, 1038.0], [73.5, 1046.0], [73.6, 1046.0], [73.7, 1046.0], [73.8, 1046.0], [73.9, 1046.0], [74.0, 1049.0], [74.1, 1049.0], [74.2, 1049.0], [74.3, 1049.0], [74.4, 1049.0], [74.5, 1053.0], [74.6, 1053.0], [74.7, 1053.0], [74.8, 1053.0], [74.9, 1053.0], [75.0, 1058.0], [75.1, 1058.0], [75.2, 1058.0], [75.3, 1058.0], [75.4, 1058.0], [75.5, 1058.0], [75.6, 1058.0], [75.7, 1058.0], [75.8, 1058.0], [75.9, 1058.0], [76.0, 1135.0], [76.1, 1135.0], [76.2, 1135.0], [76.3, 1135.0], [76.4, 1135.0], [76.5, 1139.0], [76.6, 1139.0], [76.7, 1139.0], [76.8, 1139.0], [76.9, 1139.0], [77.0, 1142.0], [77.1, 1142.0], [77.2, 1142.0], [77.3, 1142.0], [77.4, 1142.0], [77.5, 1142.0], [77.6, 1142.0], [77.7, 1142.0], [77.8, 1142.0], [77.9, 1142.0], [78.0, 1144.0], [78.1, 1144.0], [78.2, 1144.0], [78.3, 1144.0], [78.4, 1144.0], [78.5, 1163.0], [78.6, 1163.0], [78.7, 1163.0], [78.8, 1163.0], [78.9, 1163.0], [79.0, 1170.0], [79.1, 1170.0], [79.2, 1170.0], [79.3, 1170.0], [79.4, 1170.0], [79.5, 1173.0], [79.6, 1173.0], [79.7, 1173.0], [79.8, 1173.0], [79.9, 1173.0], [80.0, 1173.0], [80.1, 1173.0], [80.2, 1173.0], [80.3, 1173.0], [80.4, 1173.0], [80.5, 1174.0], [80.6, 1174.0], [80.7, 1174.0], [80.8, 1174.0], [80.9, 1174.0], [81.0, 1197.0], [81.1, 1197.0], [81.2, 1197.0], [81.3, 1197.0], [81.4, 1197.0], [81.5, 1206.0], [81.6, 1206.0], [81.7, 1206.0], [81.8, 1206.0], [81.9, 1206.0], [82.0, 1208.0], [82.1, 1208.0], [82.2, 1208.0], [82.3, 1208.0], [82.4, 1208.0], [82.5, 1266.0], [82.6, 1266.0], [82.7, 1266.0], [82.8, 1266.0], [82.9, 1266.0], [83.0, 1270.0], [83.1, 1270.0], [83.2, 1270.0], [83.3, 1270.0], [83.4, 1270.0], [83.5, 1277.0], [83.6, 1277.0], [83.7, 1277.0], [83.8, 1277.0], [83.9, 1277.0], [84.0, 1277.0], [84.1, 1277.0], [84.2, 1277.0], [84.3, 1277.0], [84.4, 1277.0], [84.5, 1278.0], [84.6, 1278.0], [84.7, 1278.0], [84.8, 1278.0], [84.9, 1278.0], [85.0, 1279.0], [85.1, 1279.0], [85.2, 1279.0], [85.3, 1279.0], [85.4, 1279.0], [85.5, 1279.0], [85.6, 1279.0], [85.7, 1279.0], [85.8, 1279.0], [85.9, 1279.0], [86.0, 1280.0], [86.1, 1280.0], [86.2, 1280.0], [86.3, 1280.0], [86.4, 1280.0], [86.5, 1280.0], [86.6, 1280.0], [86.7, 1280.0], [86.8, 1280.0], [86.9, 1280.0], [87.0, 1286.0], [87.1, 1286.0], [87.2, 1286.0], [87.3, 1286.0], [87.4, 1286.0], [87.5, 1375.0], [87.6, 1375.0], [87.7, 1375.0], [87.8, 1375.0], [87.9, 1375.0], [88.0, 1381.0], [88.1, 1381.0], [88.2, 1381.0], [88.3, 1381.0], [88.4, 1381.0], [88.5, 1382.0], [88.6, 1382.0], [88.7, 1382.0], [88.8, 1382.0], [88.9, 1382.0], [89.0, 1382.0], [89.1, 1382.0], [89.2, 1382.0], [89.3, 1382.0], [89.4, 1382.0], [89.5, 1383.0], [89.6, 1383.0], [89.7, 1383.0], [89.8, 1383.0], [89.9, 1383.0], [90.0, 1383.0], [90.1, 1383.0], [90.2, 1383.0], [90.3, 1383.0], [90.4, 1383.0], [90.5, 1384.0], [90.6, 1384.0], [90.7, 1384.0], [90.8, 1384.0], [90.9, 1384.0], [91.0, 1384.0], [91.1, 1384.0], [91.2, 1384.0], [91.3, 1384.0], [91.4, 1384.0], [91.5, 1439.0], [91.6, 1439.0], [91.7, 1439.0], [91.8, 1439.0], [91.9, 1439.0], [92.0, 1445.0], [92.1, 1445.0], [92.2, 1445.0], [92.3, 1445.0], [92.4, 1445.0], [92.5, 1445.0], [92.6, 1445.0], [92.7, 1445.0], [92.8, 1445.0], [92.9, 1445.0], [93.0, 1447.0], [93.1, 1447.0], [93.2, 1447.0], [93.3, 1447.0], [93.4, 1447.0], [93.5, 1447.0], [93.6, 1447.0], [93.7, 1447.0], [93.8, 1447.0], [93.9, 1447.0], [94.0, 1448.0], [94.1, 1448.0], [94.2, 1448.0], [94.3, 1448.0], [94.4, 1448.0], [94.5, 1448.0], [94.6, 1448.0], [94.7, 1448.0], [94.8, 1448.0], [94.9, 1448.0], [95.0, 1448.0], [95.1, 1448.0], [95.2, 1448.0], [95.3, 1448.0], [95.4, 1448.0], [95.5, 1449.0], [95.6, 1449.0], [95.7, 1449.0], [95.8, 1449.0], [95.9, 1449.0], [96.0, 1581.0], [96.1, 1581.0], [96.2, 1581.0], [96.3, 1581.0], [96.4, 1581.0], [96.5, 1819.0], [96.6, 1819.0], [96.7, 1819.0], [96.8, 1819.0], [96.9, 1819.0], [97.0, 2145.0], [97.1, 2145.0], [97.2, 2145.0], [97.3, 2145.0], [97.4, 2145.0], [97.5, 2146.0], [97.6, 2146.0], [97.7, 2146.0], [97.8, 2146.0], [97.9, 2146.0], [98.0, 2146.0], [98.1, 2146.0], [98.2, 2146.0], [98.3, 2146.0], [98.4, 2146.0], [98.5, 2159.0], [98.6, 2159.0], [98.7, 2159.0], [98.8, 2159.0], [98.9, 2159.0], [99.0, 2161.0], [99.1, 2161.0], [99.2, 2161.0], [99.3, 2161.0], [99.4, 2161.0], [99.5, 3238.0], [99.6, 3238.0], [99.7, 3238.0], [99.8, 3238.0], [99.9, 3238.0]], "isOverall": false, "label": "config 2 req", "isController": false}, {"data": [[0.0, 1002.0], [0.1, 1002.0], [0.2, 1002.0], [0.3, 1002.0], [0.4, 1002.0], [0.5, 1002.0], [0.6, 1002.0], [0.7, 1002.0], [0.8, 1002.0], [0.9, 1002.0], [1.0, 1003.0], [1.1, 1003.0], [1.2, 1003.0], [1.3, 1003.0], [1.4, 1003.0], [1.5, 1005.0], [1.6, 1005.0], [1.7, 1005.0], [1.8, 1005.0], [1.9, 1005.0], [2.0, 1007.0], [2.1, 1007.0], [2.2, 1007.0], [2.3, 1007.0], [2.4, 1007.0], [2.5, 1026.0], [2.6, 1026.0], [2.7, 1026.0], [2.8, 1026.0], [2.9, 1026.0], [3.0, 1026.0], [3.1, 1026.0], [3.2, 1026.0], [3.3, 1026.0], [3.4, 1026.0], [3.5, 1027.0], [3.6, 1027.0], [3.7, 1027.0], [3.8, 1027.0], [3.9, 1027.0], [4.0, 1028.0], [4.1, 1028.0], [4.2, 1028.0], [4.3, 1028.0], [4.4, 1028.0], [4.5, 1039.0], [4.6, 1039.0], [4.7, 1039.0], [4.8, 1039.0], [4.9, 1039.0], [5.0, 1040.0], [5.1, 1040.0], [5.2, 1040.0], [5.3, 1040.0], [5.4, 1040.0], [5.5, 1048.0], [5.6, 1048.0], [5.7, 1048.0], [5.8, 1048.0], [5.9, 1048.0], [6.0, 1048.0], [6.1, 1048.0], [6.2, 1048.0], [6.3, 1048.0], [6.4, 1048.0], [6.5, 1058.0], [6.6, 1058.0], [6.7, 1058.0], [6.8, 1058.0], [6.9, 1058.0], [7.0, 1059.0], [7.1, 1059.0], [7.2, 1059.0], [7.3, 1059.0], [7.4, 1059.0], [7.5, 1062.0], [7.6, 1062.0], [7.7, 1062.0], [7.8, 1062.0], [7.9, 1062.0], [8.0, 1068.0], [8.1, 1068.0], [8.2, 1068.0], [8.3, 1068.0], [8.4, 1068.0], [8.5, 1072.0], [8.6, 1072.0], [8.7, 1072.0], [8.8, 1072.0], [8.9, 1072.0], [9.0, 1072.0], [9.1, 1072.0], [9.2, 1072.0], [9.3, 1072.0], [9.4, 1072.0], [9.5, 1073.0], [9.6, 1073.0], [9.7, 1073.0], [9.8, 1073.0], [9.9, 1073.0], [10.0, 1073.0], [10.1, 1073.0], [10.2, 1073.0], [10.3, 1073.0], [10.4, 1073.0], [10.5, 1073.0], [10.6, 1073.0], [10.7, 1073.0], [10.8, 1073.0], [10.9, 1073.0], [11.0, 1074.0], [11.1, 1074.0], [11.2, 1074.0], [11.3, 1074.0], [11.4, 1074.0], [11.5, 1074.0], [11.6, 1074.0], [11.7, 1074.0], [11.8, 1074.0], [11.9, 1074.0], [12.0, 1074.0], [12.1, 1074.0], [12.2, 1074.0], [12.3, 1074.0], [12.4, 1074.0], [12.5, 1075.0], [12.6, 1075.0], [12.7, 1075.0], [12.8, 1075.0], [12.9, 1075.0], [13.0, 1079.0], [13.1, 1079.0], [13.2, 1079.0], [13.3, 1079.0], [13.4, 1079.0], [13.5, 1082.0], [13.6, 1082.0], [13.7, 1082.0], [13.8, 1082.0], [13.9, 1082.0], [14.0, 1084.0], [14.1, 1084.0], [14.2, 1084.0], [14.3, 1084.0], [14.4, 1084.0], [14.5, 1084.0], [14.6, 1084.0], [14.7, 1084.0], [14.8, 1084.0], [14.9, 1084.0], [15.0, 1084.0], [15.1, 1084.0], [15.2, 1084.0], [15.3, 1084.0], [15.4, 1084.0], [15.5, 1084.0], [15.6, 1084.0], [15.7, 1084.0], [15.8, 1084.0], [15.9, 1084.0], [16.0, 1085.0], [16.1, 1085.0], [16.2, 1085.0], [16.3, 1085.0], [16.4, 1085.0], [16.5, 1086.0], [16.6, 1086.0], [16.7, 1086.0], [16.8, 1086.0], [16.9, 1086.0], [17.0, 1086.0], [17.1, 1086.0], [17.2, 1086.0], [17.3, 1086.0], [17.4, 1086.0], [17.5, 1086.0], [17.6, 1086.0], [17.7, 1086.0], [17.8, 1086.0], [17.9, 1086.0], [18.0, 1090.0], [18.1, 1090.0], [18.2, 1090.0], [18.3, 1090.0], [18.4, 1090.0], [18.5, 1090.0], [18.6, 1090.0], [18.7, 1090.0], [18.8, 1090.0], [18.9, 1090.0], [19.0, 1092.0], [19.1, 1092.0], [19.2, 1092.0], [19.3, 1092.0], [19.4, 1092.0], [19.5, 1122.0], [19.6, 1122.0], [19.7, 1122.0], [19.8, 1122.0], [19.9, 1122.0], [20.0, 1130.0], [20.1, 1130.0], [20.2, 1130.0], [20.3, 1130.0], [20.4, 1130.0], [20.5, 1135.0], [20.6, 1135.0], [20.7, 1135.0], [20.8, 1135.0], [20.9, 1135.0], [21.0, 1135.0], [21.1, 1135.0], [21.2, 1135.0], [21.3, 1135.0], [21.4, 1135.0], [21.5, 1136.0], [21.6, 1136.0], [21.7, 1136.0], [21.8, 1136.0], [21.9, 1136.0], [22.0, 1136.0], [22.1, 1136.0], [22.2, 1136.0], [22.3, 1136.0], [22.4, 1136.0], [22.5, 1136.0], [22.6, 1136.0], [22.7, 1136.0], [22.8, 1136.0], [22.9, 1136.0], [23.0, 1137.0], [23.1, 1137.0], [23.2, 1137.0], [23.3, 1137.0], [23.4, 1137.0], [23.5, 1137.0], [23.6, 1137.0], [23.7, 1137.0], [23.8, 1137.0], [23.9, 1137.0], [24.0, 1147.0], [24.1, 1147.0], [24.2, 1147.0], [24.3, 1147.0], [24.4, 1147.0], [24.5, 1147.0], [24.6, 1147.0], [24.7, 1147.0], [24.8, 1147.0], [24.9, 1147.0], [25.0, 1150.0], [25.1, 1150.0], [25.2, 1150.0], [25.3, 1150.0], [25.4, 1150.0], [25.5, 1151.0], [25.6, 1151.0], [25.7, 1151.0], [25.8, 1151.0], [25.9, 1151.0], [26.0, 1151.0], [26.1, 1151.0], [26.2, 1151.0], [26.3, 1151.0], [26.4, 1151.0], [26.5, 1152.0], [26.6, 1152.0], [26.7, 1152.0], [26.8, 1152.0], [26.9, 1152.0], [27.0, 1153.0], [27.1, 1153.0], [27.2, 1153.0], [27.3, 1153.0], [27.4, 1153.0], [27.5, 1153.0], [27.6, 1153.0], [27.7, 1153.0], [27.8, 1153.0], [27.9, 1153.0], [28.0, 1155.0], [28.1, 1155.0], [28.2, 1155.0], [28.3, 1155.0], [28.4, 1155.0], [28.5, 1156.0], [28.6, 1156.0], [28.7, 1156.0], [28.8, 1156.0], [28.9, 1156.0], [29.0, 1156.0], [29.1, 1156.0], [29.2, 1156.0], [29.3, 1156.0], [29.4, 1156.0], [29.5, 1156.0], [29.6, 1156.0], [29.7, 1156.0], [29.8, 1156.0], [29.9, 1156.0], [30.0, 1176.0], [30.1, 1176.0], [30.2, 1176.0], [30.3, 1176.0], [30.4, 1176.0], [30.5, 1177.0], [30.6, 1177.0], [30.7, 1177.0], [30.8, 1177.0], [30.9, 1177.0], [31.0, 1177.0], [31.1, 1177.0], [31.2, 1177.0], [31.3, 1177.0], [31.4, 1177.0], [31.5, 1177.0], [31.6, 1177.0], [31.7, 1177.0], [31.8, 1177.0], [31.9, 1177.0], [32.0, 1178.0], [32.1, 1178.0], [32.2, 1178.0], [32.3, 1178.0], [32.4, 1178.0], [32.5, 1179.0], [32.6, 1179.0], [32.7, 1179.0], [32.8, 1179.0], [32.9, 1179.0], [33.0, 1191.0], [33.1, 1191.0], [33.2, 1191.0], [33.3, 1191.0], [33.4, 1191.0], [33.5, 1202.0], [33.6, 1202.0], [33.7, 1202.0], [33.8, 1202.0], [33.9, 1202.0], [34.0, 1206.0], [34.1, 1206.0], [34.2, 1206.0], [34.3, 1206.0], [34.4, 1206.0], [34.5, 1207.0], [34.6, 1207.0], [34.7, 1207.0], [34.8, 1207.0], [34.9, 1207.0], [35.0, 1207.0], [35.1, 1207.0], [35.2, 1207.0], [35.3, 1207.0], [35.4, 1207.0], [35.5, 1207.0], [35.6, 1207.0], [35.7, 1207.0], [35.8, 1207.0], [35.9, 1207.0], [36.0, 1207.0], [36.1, 1207.0], [36.2, 1207.0], [36.3, 1207.0], [36.4, 1207.0], [36.5, 1208.0], [36.6, 1208.0], [36.7, 1208.0], [36.8, 1208.0], [36.9, 1208.0], [37.0, 1208.0], [37.1, 1208.0], [37.2, 1208.0], [37.3, 1208.0], [37.4, 1208.0], [37.5, 1208.0], [37.6, 1208.0], [37.7, 1208.0], [37.8, 1208.0], [37.9, 1208.0], [38.0, 1209.0], [38.1, 1209.0], [38.2, 1209.0], [38.3, 1209.0], [38.4, 1209.0], [38.5, 1209.0], [38.6, 1209.0], [38.7, 1209.0], [38.8, 1209.0], [38.9, 1209.0], [39.0, 1209.0], [39.1, 1209.0], [39.2, 1209.0], [39.3, 1209.0], [39.4, 1209.0], [39.5, 1209.0], [39.6, 1209.0], [39.7, 1209.0], [39.8, 1209.0], [39.9, 1209.0], [40.0, 1211.0], [40.1, 1211.0], [40.2, 1211.0], [40.3, 1211.0], [40.4, 1211.0], [40.5, 1212.0], [40.6, 1212.0], [40.7, 1212.0], [40.8, 1212.0], [40.9, 1212.0], [41.0, 1212.0], [41.1, 1212.0], [41.2, 1212.0], [41.3, 1212.0], [41.4, 1212.0], [41.5, 1213.0], [41.6, 1213.0], [41.7, 1213.0], [41.8, 1213.0], [41.9, 1213.0], [42.0, 1213.0], [42.1, 1213.0], [42.2, 1213.0], [42.3, 1213.0], [42.4, 1213.0], [42.5, 1215.0], [42.6, 1215.0], [42.7, 1215.0], [42.8, 1215.0], [42.9, 1215.0], [43.0, 1223.0], [43.1, 1223.0], [43.2, 1223.0], [43.3, 1223.0], [43.4, 1223.0], [43.5, 1224.0], [43.6, 1224.0], [43.7, 1224.0], [43.8, 1224.0], [43.9, 1224.0], [44.0, 1224.0], [44.1, 1224.0], [44.2, 1224.0], [44.3, 1224.0], [44.4, 1224.0], [44.5, 1225.0], [44.6, 1225.0], [44.7, 1225.0], [44.8, 1225.0], [44.9, 1225.0], [45.0, 1225.0], [45.1, 1225.0], [45.2, 1225.0], [45.3, 1225.0], [45.4, 1225.0], [45.5, 1229.0], [45.6, 1229.0], [45.7, 1229.0], [45.8, 1229.0], [45.9, 1229.0], [46.0, 1229.0], [46.1, 1229.0], [46.2, 1229.0], [46.3, 1229.0], [46.4, 1229.0], [46.5, 1245.0], [46.6, 1245.0], [46.7, 1245.0], [46.8, 1245.0], [46.9, 1245.0], [47.0, 1246.0], [47.1, 1246.0], [47.2, 1246.0], [47.3, 1246.0], [47.4, 1246.0], [47.5, 1249.0], [47.6, 1249.0], [47.7, 1249.0], [47.8, 1249.0], [47.9, 1249.0], [48.0, 1252.0], [48.1, 1252.0], [48.2, 1252.0], [48.3, 1252.0], [48.4, 1252.0], [48.5, 1254.0], [48.6, 1254.0], [48.7, 1254.0], [48.8, 1254.0], [48.9, 1254.0], [49.0, 1254.0], [49.1, 1254.0], [49.2, 1254.0], [49.3, 1254.0], [49.4, 1254.0], [49.5, 1254.0], [49.6, 1254.0], [49.7, 1254.0], [49.8, 1254.0], [49.9, 1254.0], [50.0, 1254.0], [50.1, 1254.0], [50.2, 1254.0], [50.3, 1254.0], [50.4, 1254.0], [50.5, 1255.0], [50.6, 1255.0], [50.7, 1255.0], [50.8, 1255.0], [50.9, 1255.0], [51.0, 1256.0], [51.1, 1256.0], [51.2, 1256.0], [51.3, 1256.0], [51.4, 1256.0], [51.5, 1256.0], [51.6, 1256.0], [51.7, 1256.0], [51.8, 1256.0], [51.9, 1256.0], [52.0, 1265.0], [52.1, 1265.0], [52.2, 1265.0], [52.3, 1265.0], [52.4, 1265.0], [52.5, 1266.0], [52.6, 1266.0], [52.7, 1266.0], [52.8, 1266.0], [52.9, 1266.0], [53.0, 1267.0], [53.1, 1267.0], [53.2, 1267.0], [53.3, 1267.0], [53.4, 1267.0], [53.5, 1272.0], [53.6, 1272.0], [53.7, 1272.0], [53.8, 1272.0], [53.9, 1272.0], [54.0, 1273.0], [54.1, 1273.0], [54.2, 1273.0], [54.3, 1273.0], [54.4, 1273.0], [54.5, 1274.0], [54.6, 1274.0], [54.7, 1274.0], [54.8, 1274.0], [54.9, 1274.0], [55.0, 1277.0], [55.1, 1277.0], [55.2, 1277.0], [55.3, 1277.0], [55.4, 1277.0], [55.5, 1282.0], [55.6, 1282.0], [55.7, 1282.0], [55.8, 1282.0], [55.9, 1282.0], [56.0, 1283.0], [56.1, 1283.0], [56.2, 1283.0], [56.3, 1283.0], [56.4, 1283.0], [56.5, 1283.0], [56.6, 1283.0], [56.7, 1283.0], [56.8, 1283.0], [56.9, 1283.0], [57.0, 1283.0], [57.1, 1283.0], [57.2, 1283.0], [57.3, 1283.0], [57.4, 1283.0], [57.5, 1284.0], [57.6, 1284.0], [57.7, 1284.0], [57.8, 1284.0], [57.9, 1284.0], [58.0, 1284.0], [58.1, 1284.0], [58.2, 1284.0], [58.3, 1284.0], [58.4, 1284.0], [58.5, 1285.0], [58.6, 1285.0], [58.7, 1285.0], [58.8, 1285.0], [58.9, 1285.0], [59.0, 1290.0], [59.1, 1290.0], [59.2, 1290.0], [59.3, 1290.0], [59.4, 1290.0], [59.5, 1303.0], [59.6, 1303.0], [59.7, 1303.0], [59.8, 1303.0], [59.9, 1303.0], [60.0, 1303.0], [60.1, 1303.0], [60.2, 1303.0], [60.3, 1303.0], [60.4, 1303.0], [60.5, 1309.0], [60.6, 1309.0], [60.7, 1309.0], [60.8, 1309.0], [60.9, 1309.0], [61.0, 1314.0], [61.1, 1314.0], [61.2, 1314.0], [61.3, 1314.0], [61.4, 1314.0], [61.5, 1314.0], [61.6, 1314.0], [61.7, 1314.0], [61.8, 1314.0], [61.9, 1314.0], [62.0, 1314.0], [62.1, 1314.0], [62.2, 1314.0], [62.3, 1314.0], [62.4, 1314.0], [62.5, 1315.0], [62.6, 1315.0], [62.7, 1315.0], [62.8, 1315.0], [62.9, 1315.0], [63.0, 1315.0], [63.1, 1315.0], [63.2, 1315.0], [63.3, 1315.0], [63.4, 1315.0], [63.5, 1315.0], [63.6, 1315.0], [63.7, 1315.0], [63.8, 1315.0], [63.9, 1315.0], [64.0, 1315.0], [64.1, 1315.0], [64.2, 1315.0], [64.3, 1315.0], [64.4, 1315.0], [64.5, 1322.0], [64.6, 1322.0], [64.7, 1322.0], [64.8, 1322.0], [64.9, 1322.0], [65.0, 1322.0], [65.1, 1322.0], [65.2, 1322.0], [65.3, 1322.0], [65.4, 1322.0], [65.5, 1322.0], [65.6, 1322.0], [65.7, 1322.0], [65.8, 1322.0], [65.9, 1322.0], [66.0, 1327.0], [66.1, 1327.0], [66.2, 1327.0], [66.3, 1327.0], [66.4, 1327.0], [66.5, 1327.0], [66.6, 1327.0], [66.7, 1327.0], [66.8, 1327.0], [66.9, 1327.0], [67.0, 1328.0], [67.1, 1328.0], [67.2, 1328.0], [67.3, 1328.0], [67.4, 1328.0], [67.5, 1328.0], [67.6, 1328.0], [67.7, 1328.0], [67.8, 1328.0], [67.9, 1328.0], [68.0, 1328.0], [68.1, 1328.0], [68.2, 1328.0], [68.3, 1328.0], [68.4, 1328.0], [68.5, 1329.0], [68.6, 1329.0], [68.7, 1329.0], [68.8, 1329.0], [68.9, 1329.0], [69.0, 1329.0], [69.1, 1329.0], [69.2, 1329.0], [69.3, 1329.0], [69.4, 1329.0], [69.5, 1329.0], [69.6, 1329.0], [69.7, 1329.0], [69.8, 1329.0], [69.9, 1329.0], [70.0, 1329.0], [70.1, 1329.0], [70.2, 1329.0], [70.3, 1329.0], [70.4, 1329.0], [70.5, 1342.0], [70.6, 1342.0], [70.7, 1342.0], [70.8, 1342.0], [70.9, 1342.0], [71.0, 1347.0], [71.1, 1347.0], [71.2, 1347.0], [71.3, 1347.0], [71.4, 1347.0], [71.5, 1360.0], [71.6, 1360.0], [71.7, 1360.0], [71.8, 1360.0], [71.9, 1360.0], [72.0, 1382.0], [72.1, 1382.0], [72.2, 1382.0], [72.3, 1382.0], [72.4, 1382.0], [72.5, 1384.0], [72.6, 1384.0], [72.7, 1384.0], [72.8, 1384.0], [72.9, 1384.0], [73.0, 1385.0], [73.1, 1385.0], [73.2, 1385.0], [73.3, 1385.0], [73.4, 1385.0], [73.5, 1387.0], [73.6, 1387.0], [73.7, 1387.0], [73.8, 1387.0], [73.9, 1387.0], [74.0, 1387.0], [74.1, 1387.0], [74.2, 1387.0], [74.3, 1387.0], [74.4, 1387.0], [74.5, 1388.0], [74.6, 1388.0], [74.7, 1388.0], [74.8, 1388.0], [74.9, 1388.0], [75.0, 1388.0], [75.1, 1388.0], [75.2, 1388.0], [75.3, 1388.0], [75.4, 1388.0], [75.5, 1388.0], [75.6, 1388.0], [75.7, 1388.0], [75.8, 1388.0], [75.9, 1388.0], [76.0, 1389.0], [76.1, 1389.0], [76.2, 1389.0], [76.3, 1389.0], [76.4, 1389.0], [76.5, 1389.0], [76.6, 1389.0], [76.7, 1389.0], [76.8, 1389.0], [76.9, 1389.0], [77.0, 1398.0], [77.1, 1398.0], [77.2, 1398.0], [77.3, 1398.0], [77.4, 1398.0], [77.5, 1400.0], [77.6, 1400.0], [77.7, 1400.0], [77.8, 1400.0], [77.9, 1400.0], [78.0, 1400.0], [78.1, 1400.0], [78.2, 1400.0], [78.3, 1400.0], [78.4, 1400.0], [78.5, 1438.0], [78.6, 1438.0], [78.7, 1438.0], [78.8, 1438.0], [78.9, 1438.0], [79.0, 1438.0], [79.1, 1438.0], [79.2, 1438.0], [79.3, 1438.0], [79.4, 1438.0], [79.5, 1446.0], [79.6, 1446.0], [79.7, 1446.0], [79.8, 1446.0], [79.9, 1446.0], [80.0, 1452.0], [80.1, 1452.0], [80.2, 1452.0], [80.3, 1452.0], [80.4, 1452.0], [80.5, 1452.0], [80.6, 1452.0], [80.7, 1452.0], [80.8, 1452.0], [80.9, 1452.0], [81.0, 1452.0], [81.1, 1452.0], [81.2, 1452.0], [81.3, 1452.0], [81.4, 1452.0], [81.5, 1452.0], [81.6, 1452.0], [81.7, 1452.0], [81.8, 1452.0], [81.9, 1452.0], [82.0, 1453.0], [82.1, 1453.0], [82.2, 1453.0], [82.3, 1453.0], [82.4, 1453.0], [82.5, 1453.0], [82.6, 1453.0], [82.7, 1453.0], [82.8, 1453.0], [82.9, 1453.0], [83.0, 1453.0], [83.1, 1453.0], [83.2, 1453.0], [83.3, 1453.0], [83.4, 1453.0], [83.5, 1497.0], [83.6, 1497.0], [83.7, 1497.0], [83.8, 1497.0], [83.9, 1497.0], [84.0, 1509.0], [84.1, 1509.0], [84.2, 1509.0], [84.3, 1509.0], [84.4, 1509.0], [84.5, 1546.0], [84.6, 1546.0], [84.7, 1546.0], [84.8, 1546.0], [84.9, 1546.0], [85.0, 1551.0], [85.1, 1551.0], [85.2, 1551.0], [85.3, 1551.0], [85.4, 1551.0], [85.5, 1552.0], [85.6, 1552.0], [85.7, 1552.0], [85.8, 1552.0], [85.9, 1552.0], [86.0, 1553.0], [86.1, 1553.0], [86.2, 1553.0], [86.3, 1553.0], [86.4, 1553.0], [86.5, 1553.0], [86.6, 1553.0], [86.7, 1553.0], [86.8, 1553.0], [86.9, 1553.0], [87.0, 1559.0], [87.1, 1559.0], [87.2, 1559.0], [87.3, 1559.0], [87.4, 1559.0], [87.5, 1564.0], [87.6, 1564.0], [87.7, 1564.0], [87.8, 1564.0], [87.9, 1564.0], [88.0, 1604.0], [88.1, 1604.0], [88.2, 1604.0], [88.3, 1604.0], [88.4, 1604.0], [88.5, 1623.0], [88.6, 1623.0], [88.7, 1623.0], [88.8, 1623.0], [88.9, 1623.0], [89.0, 1638.0], [89.1, 1638.0], [89.2, 1638.0], [89.3, 1638.0], [89.4, 1638.0], [89.5, 1643.0], [89.6, 1643.0], [89.7, 1643.0], [89.8, 1643.0], [89.9, 1643.0], [90.0, 1643.0], [90.1, 1643.0], [90.2, 1643.0], [90.3, 1643.0], [90.4, 1643.0], [90.5, 1643.0], [90.6, 1643.0], [90.7, 1643.0], [90.8, 1643.0], [90.9, 1643.0], [91.0, 1991.0], [91.1, 1991.0], [91.2, 1991.0], [91.3, 1991.0], [91.4, 1991.0], [91.5, 1999.0], [91.6, 1999.0], [91.7, 1999.0], [91.8, 1999.0], [91.9, 1999.0], [92.0, 2001.0], [92.1, 2001.0], [92.2, 2001.0], [92.3, 2001.0], [92.4, 2001.0], [92.5, 2001.0], [92.6, 2001.0], [92.7, 2001.0], [92.8, 2001.0], [92.9, 2001.0], [93.0, 2056.0], [93.1, 2056.0], [93.2, 2056.0], [93.3, 2056.0], [93.4, 2056.0], [93.5, 2056.0], [93.6, 2056.0], [93.7, 2056.0], [93.8, 2056.0], [93.9, 2056.0], [94.0, 2149.0], [94.1, 2149.0], [94.2, 2149.0], [94.3, 2149.0], [94.4, 2149.0], [94.5, 2151.0], [94.6, 2151.0], [94.7, 2151.0], [94.8, 2151.0], [94.9, 2151.0], [95.0, 2151.0], [95.1, 2151.0], [95.2, 2151.0], [95.3, 2151.0], [95.4, 2151.0], [95.5, 2165.0], [95.6, 2165.0], [95.7, 2165.0], [95.8, 2165.0], [95.9, 2165.0], [96.0, 2166.0], [96.1, 2166.0], [96.2, 2166.0], [96.3, 2166.0], [96.4, 2166.0], [96.5, 2221.0], [96.6, 2221.0], [96.7, 2221.0], [96.8, 2221.0], [96.9, 2221.0], [97.0, 2233.0], [97.1, 2233.0], [97.2, 2233.0], [97.3, 2233.0], [97.4, 2233.0], [97.5, 2357.0], [97.6, 2357.0], [97.7, 2357.0], [97.8, 2357.0], [97.9, 2357.0], [98.0, 2357.0], [98.1, 2357.0], [98.2, 2357.0], [98.3, 2357.0], [98.4, 2357.0], [98.5, 2602.0], [98.6, 2602.0], [98.7, 2602.0], [98.8, 2602.0], [98.9, 2602.0], [99.0, 3239.0], [99.1, 3239.0], [99.2, 3239.0], [99.3, 3239.0], [99.4, 3239.0], [99.5, 3242.0], [99.6, 3242.0], [99.7, 3242.0], [99.8, 3242.0], [99.9, 3242.0]], "isOverall": false, "label": "config 1 req", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 52.0, "series": [{"data": [[2100.0, 5.0], [600.0, 32.0], [700.0, 30.0], [3200.0, 1.0], [800.0, 16.0], [900.0, 12.0], [1000.0, 13.0], [1100.0, 6.0], [1200.0, 5.0], [1300.0, 6.0], [1400.0, 9.0], [400.0, 35.0], [1600.0, 1.0], [500.0, 29.0]], "isOverall": false, "label": "config 3 req", "isController": false}, {"data": [[2100.0, 5.0], [600.0, 35.0], [700.0, 46.0], [3200.0, 1.0], [800.0, 40.0], [900.0, 13.0], [1000.0, 18.0], [1100.0, 11.0], [1200.0, 12.0], [1300.0, 8.0], [1400.0, 9.0], [1500.0, 1.0], [1800.0, 1.0]], "isOverall": false, "label": "config 2 req", "isController": false}, {"data": [[2100.0, 5.0], [2200.0, 2.0], [2300.0, 2.0], [2600.0, 1.0], [3200.0, 2.0], [1000.0, 39.0], [1100.0, 28.0], [1200.0, 52.0], [1300.0, 36.0], [1400.0, 13.0], [1500.0, 8.0], [1600.0, 6.0], [1900.0, 2.0], [2000.0, 4.0]], "isOverall": false, "label": "config 1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 36.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 413.0, "series": [{"data": [[0.0, 36.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 151.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 413.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.7500000000000004, "minX": 1.71653616E12, "maxY": 7.770270270270267, "series": [{"data": [[1.71653616E12, 2.7500000000000004], [1.71653622E12, 7.770270270270267], [1.71653628E12, 4.055555555555555]], "isOverall": false, "label": "config 1", "isController": false}, {"data": [[1.71653616E12, 2.7500000000000004], [1.71653622E12, 7.7229729729729675], [1.71653628E12, 3.944444444444444]], "isOverall": false, "label": "config 3", "isController": false}, {"data": [[1.71653616E12, 2.7500000000000004], [1.71653622E12, 7.736486486486484], [1.71653628E12, 3.944444444444445]], "isOverall": false, "label": "config 2", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71653628E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 430.0, "minX": 1.0, "maxY": 2211.6666666666665, "series": [{"data": [[9.0, 1032.0], [3.0, 835.75], [12.0, 864.8749999999999], [15.0, 584.75], [17.0, 430.0], [18.0, 717.1], [20.0, 465.6], [21.0, 679.2173913043479], [23.0, 553.5], [6.0, 1373.875], [24.0, 828.6666666666666], [27.0, 794.0833333333335], [30.0, 1094.75]], "isOverall": false, "label": "config 3 req", "isController": false}, {"data": [[20.044999999999998, 813.5600000000003]], "isOverall": false, "label": "config 3 req-Aggregated", "isController": false}, {"data": [[2.0, 645.0], [9.0, 1137.0833333333333], [11.0, 830.75], [3.0, 1023.0], [12.0, 1097.9999999999998], [13.0, 693.0], [15.0, 816.6315789473684], [16.0, 702.0], [4.0, 737.0], [17.0, 683.25], [18.0, 862.1111111111111], [19.0, 683.0], [20.0, 668.0], [5.0, 713.0], [21.0, 825.5238095238096], [23.0, 719.875], [6.0, 1667.1666666666667], [24.0, 937.3333333333334], [26.0, 815.111111111111], [27.0, 1125.148148148148], [28.0, 874.5], [29.0, 801.0], [30.0, 1213.666666666667]], "isOverall": false, "label": "config 2 req", "isController": false}, {"data": [[19.84000000000001, 957.7950000000001]], "isOverall": false, "label": "config 2 req-Aggregated", "isController": false}, {"data": [[9.0, 1596.888888888889], [10.0, 1552.25], [3.0, 1434.6666666666667], [12.0, 1343.4166666666665], [13.0, 1208.0], [15.0, 1195.6000000000001], [16.0, 1071.0], [4.0, 1156.0], [1.0, 1452.0], [18.0, 1311.8888888888887], [19.0, 1084.2857142857142], [21.0, 1256.8095238095239], [22.0, 1135.2499999999998], [6.0, 2211.6666666666665], [24.0, 1427.7083333333335], [25.0, 1249.6666666666665], [27.0, 1293.2962962962958], [28.0, 1269.1], [7.0, 2000.3333333333333], [30.0, 1431.3000000000002]], "isOverall": false, "label": "config 1 req", "isController": false}, {"data": [[19.550000000000004, 1342.7749999999996]], "isOverall": false, "label": "config 1 req-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 30.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 126.4, "minX": 1.71653616E12, "maxY": 1709.4, "series": [{"data": [[1.71653616E12, 184.8], [1.71653622E12, 1709.4], [1.71653628E12, 415.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71653616E12, 126.4], [1.71653622E12, 1169.2], [1.71653628E12, 284.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71653628E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 787.9797297297298, "minX": 1.71653616E12, "maxY": 1615.625, "series": [{"data": [[1.71653616E12, 996.125], [1.71653622E12, 787.9797297297298], [1.71653628E12, 837.5833333333334]], "isOverall": false, "label": "config 3 req", "isController": false}, {"data": [[1.71653616E12, 1129.4374999999998], [1.71653622E12, 938.3445945945945], [1.71653628E12, 961.4722222222223]], "isOverall": false, "label": "config 2 req", "isController": false}, {"data": [[1.71653616E12, 1615.625], [1.71653622E12, 1301.121621621622], [1.71653628E12, 1392.7499999999998]], "isOverall": false, "label": "config 1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71653628E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 787.912162162162, "minX": 1.71653616E12, "maxY": 1615.5625, "series": [{"data": [[1.71653616E12, 995.8125], [1.71653622E12, 787.912162162162], [1.71653628E12, 837.5833333333334]], "isOverall": false, "label": "config 3 req", "isController": false}, {"data": [[1.71653616E12, 1129.4374999999998], [1.71653622E12, 938.3378378378377], [1.71653628E12, 961.4444444444445]], "isOverall": false, "label": "config 2 req", "isController": false}, {"data": [[1.71653616E12, 1615.5625], [1.71653622E12, 1301.0608108108108], [1.71653628E12, 1392.722222222222]], "isOverall": false, "label": "config 1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71653628E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71653616E12, "maxY": 2.4375000000000004, "series": [{"data": [[1.71653616E12, 2.3125], [1.71653622E12, 0.020270270270270275], [1.71653628E12, 0.0]], "isOverall": false, "label": "config 3 req", "isController": false}, {"data": [[1.71653616E12, 2.3125], [1.71653622E12, 0.020270270270270275], [1.71653628E12, 0.0]], "isOverall": false, "label": "config 2 req", "isController": false}, {"data": [[1.71653616E12, 2.4375000000000004], [1.71653622E12, 0.05405405405405407], [1.71653628E12, 0.0]], "isOverall": false, "label": "config 1 req", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71653628E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 406.0, "minX": 1.71653616E12, "maxY": 778.0, "series": [{"data": [[1.71653616E12, 752.0], [1.71653622E12, 778.0], [1.71653628E12, 777.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71653616E12, 748.0], [1.71653622E12, 764.6], [1.71653628E12, 763.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71653616E12, 752.0], [1.71653622E12, 777.76], [1.71653628E12, 777.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71653616E12, 752.0], [1.71653622E12, 770.8], [1.71653628E12, 767.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71653616E12, 406.0], [1.71653622E12, 442.0], [1.71653628E12, 412.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71653616E12, 646.0], [1.71653622E12, 647.0], [1.71653628E12, 676.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71653628E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 416.0, "minX": 1.0, "maxY": 1643.0, "series": [{"data": [[2.0, 644.0], [9.0, 677.0], [10.0, 621.0], [3.0, 673.0], [12.0, 764.0], [13.0, 542.0], [14.0, 730.0], [15.0, 682.0], [4.0, 420.0], [18.0, 555.0], [19.0, 625.0], [5.0, 416.0], [21.0, 627.0], [6.0, 752.0], [24.0, 635.5], [25.0, 749.5], [26.0, 645.0], [27.0, 502.0], [7.0, 677.0], [30.0, 658.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 1383.5], [9.0, 1206.0], [10.0, 1003.0], [3.0, 1617.5], [12.0, 1169.0], [13.0, 1058.0], [14.0, 1141.5], [15.0, 1074.0], [1.0, 1315.0], [4.0, 1552.0], [18.0, 1027.5], [19.0, 853.0], [5.0, 1266.0], [21.0, 1022.0], [6.0, 1643.0], [24.0, 1015.0], [25.0, 1212.0], [26.0, 1377.0], [27.0, 1278.5], [30.0, 1315.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 416.0, "minX": 1.0, "maxY": 1643.0, "series": [{"data": [[2.0, 644.0], [9.0, 677.0], [10.0, 621.0], [3.0, 673.0], [12.0, 764.0], [13.0, 542.0], [14.0, 730.0], [15.0, 682.0], [4.0, 420.0], [18.0, 555.0], [19.0, 625.0], [5.0, 416.0], [21.0, 627.0], [6.0, 752.0], [24.0, 635.5], [25.0, 749.5], [26.0, 645.0], [27.0, 502.0], [7.0, 677.0], [30.0, 658.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 1383.0], [9.0, 1206.0], [10.0, 1003.0], [3.0, 1617.5], [12.0, 1169.0], [13.0, 1058.0], [14.0, 1141.5], [15.0, 1074.0], [1.0, 1312.5], [4.0, 1552.0], [18.0, 1027.5], [19.0, 853.0], [5.0, 1266.0], [21.0, 1022.0], [6.0, 1643.0], [24.0, 1015.0], [25.0, 1212.0], [26.0, 1377.0], [27.0, 1278.5], [30.0, 1314.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.71653616E12, "maxY": 7.4, "series": [{"data": [[1.71653616E12, 0.8], [1.71653622E12, 7.4], [1.71653628E12, 1.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71653628E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.71653616E12, "maxY": 7.4, "series": [{"data": [[1.71653616E12, 0.8], [1.71653622E12, 7.4], [1.71653628E12, 1.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71653628E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.71653616E12, "maxY": 2.466666666666667, "series": [{"data": [[1.71653616E12, 0.13333333333333333], [1.71653622E12, 1.35], [1.71653628E12, 0.45]], "isOverall": false, "label": "config 3 req-success", "isController": false}, {"data": [[1.71653616E12, 0.16666666666666666], [1.71653622E12, 1.7666666666666666], [1.71653628E12, 0.21666666666666667]], "isOverall": false, "label": "config 2 req-failure", "isController": false}, {"data": [[1.71653616E12, 0.26666666666666666], [1.71653622E12, 2.466666666666667], [1.71653628E12, 0.6]], "isOverall": false, "label": "config 1 req-failure", "isController": false}, {"data": [[1.71653616E12, 0.1], [1.71653622E12, 0.7], [1.71653628E12, 0.38333333333333336]], "isOverall": false, "label": "config 2 req-success", "isController": false}, {"data": [[1.71653616E12, 0.13333333333333333], [1.71653622E12, 1.1166666666666667], [1.71653628E12, 0.15]], "isOverall": false, "label": "config 3 req-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71653628E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.71653616E12, "maxY": 5.35, "series": [{"data": [[1.71653616E12, 0.23333333333333334], [1.71653622E12, 2.05], [1.71653628E12, 0.8333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71653616E12, 0.5666666666666667], [1.71653622E12, 5.35], [1.71653628E12, 0.9666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71653628E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

